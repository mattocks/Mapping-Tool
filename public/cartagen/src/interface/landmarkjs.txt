/**
 * @namespace The 'Landmark' tool and associated methods.
 */

Tool.Landmark = {
	mode2: 'inactive', //'draw','inactive','drag'
	points: new Hash(),
	openDescriptions: [], // which point IDs have already been loaded for description
	currentDragging: null,
	drag: function() {
		$l('Landmark dragging')
	},
	activate: function() {
		$l('Landmark activated')
	},
	deactivate: function() {
		$l('Landmark deactivated')
	},
	mousedown: function() {
		console.log('mousedown in landmark')
		/*
		if (Tool.Landmark.mode2 == 'inactive') {
		}
		else if (Tool.Landmark.mode2 == 'draw') {
			var over_point = false
			Tool.Landmark.shapes2.last().points.each(function(point){
				if (point.mouse_inside()) over_point = true
				console.log(point.mouse_inside())
			})
			if (!over_point) { // if you didn't click on an existing node
				Tool.Landmark.shapes2.last().new_point(Map.pointer_x(), Map.pointer_y())
				Tool.Landmark.shapes2.last().active = true
			}
		}
		else if (Tool.Landmark.mode2 == 'drag'){
			Tool.Landmark.shapes2.last().active=true
		}
		*/

	}.bindAsEventListener(Tool.Landmark),
	mouseup: function() {
		$l('Landmark mouseup')
		//Tool.Landmark.points.push(new Tool.Landmark.MyPoint(Map.pointer_x(), Map.pointer_y(), 5))
		console.log('mouseup in landmark')
			var over_point = false
			var over_text = false
			Tool.Landmark.points.each(function(point){
				if (point.value.mouse_inside()) {
					over_point = true
					throw $break
				}
				if (point.value.mouse_inside_text()) {
					over_text = true
					throw $break
				}
				console.log(over_point)
			})
			if (!over_point && !over_text) { // if you didn't click on an existing node
				Modalbox.show('Enter a label<br /><form id="lndmrkfrm" onsubmit="Tool.Landmark.newPoint($(\'landmarker\').value, $(\'desc\').value);Modalbox.hide();Tool.Landmark.resetCursor();return false"><input type="text" id="landmarker" /><br /><br /><textarea id="desc" name="desc" style="height: 200px; width: 400px;"></textarea><br /><input type="submit" value="Make" /><input type="button" value="Cancel" onclick="Modalbox.hide()" /></form>', {title: 'Create a landmark'})
			}
			else { // done dragging the point elsewhere
				var id = Tool.Landmark.currentDragging
				new Ajax.Request('landmark.php', {
		 			method: 'get',
		  			parameters: {
						id: id,
						lon: Projection.x_to_lon(-1*Tool.Landmark.points.get(id).x),
						lat: Projection.y_to_lat(Tool.Landmark.points.get(id).y)
		  			},
		  			onSuccess: function(response) {
		  			}
				});
			}
	}.bindAsEventListener(Tool.Landmark),
	mousemove: function() {
		$l('Landmark mousemove')
	}.bindAsEventListener(Tool.Landmark),
	dblclick: function() {
		$l('Landmark dblclick')
		if (true) {
			//Tool.Landmark.mode2 = 'inactive'
			//Tool.change('Pan') //Hi!!
		}

	}.bindAsEventListener(Tool.Landmark),

	// makes the cursor turn into a pointer over the text of a landmark
	check: function(e){
		var over = false
		Tool.Landmark.points.each(function(point){
			if (point.value.mouse_inside_text() || point.value.mouse_inside() || point.value.mouse_over_edit()) {
				over = true
				throw $break
			}
		})
		if (over) {
			$('main').style.cursor = 'pointer'
		}
		else{
			$('main').style.cursor = 'default'
		}
	},

	begin: function(){
		Modalbox.show('<span>Select an icon for your landmark.<br /><img src="pushpin1.gif" onclick="Tool.Landmark.changeCursor(this.src)" /> <img src="pushpin5.gif" onclick="Tool.Landmark.changeCursor(this.src)" /></span>', {title: 'Create a landmark'})
	},
	changeCursor: function(img){
		$('cursor').src = img
		$('main').observe('mousemove', Tool.Landmark.moveCursor)
		$('cursorbox').observe('mousemove', Tool.Landmark.moveCursor)
		Modalbox.hide()
	},

	moveCursor: function(e){
		var x = Event.pointerX(e)
		var y = Event.pointerY(e)
		$('cursorbox').style.display = 'inline'
		$('cursorbox').style.left = (x+1)+'px'
		$('cursorbox').style.top = (y-$('cursor').height)+'px'
	},

	resetCursor: function(){
		$('cursorbox').style.display = 'none'
		$('main').stopObserving('mousemove', Tool.Landmark.moveCursor)
		$('cursorbox').stopObserving('mousemove', Tool.Landmark.moveCursor)
	},

	newPoint : function(labelName, desc){
		if(labelName != null && labelName != ''){
			// stores the landmark in the database
			new Ajax.Request('landmark.php', {
		 		method: 'get',
		  		parameters: {
					lon: Projection.x_to_lon(-1*Map.pointer_x()),
					lat: Projection.y_to_lat(Map.pointer_y()),
					label: labelName,
					desc: desc,
					icon: $('cursor').src.substring($('cursor').src.lastIndexOf('/')+1),
		  		},
		  		onSuccess: function(response) {
					var id = response.responseText
					//Tool.Landmark.points.push(new Tool.Landmark.MyPoint(Map.pointer_x(), Map.pointer_y(), 5, labelName, id))
					Tool.Landmark.points.set(id, new Tool.Landmark.MyPoint(Map.pointer_x(), Map.pointer_y(), 5, labelName, desc, id))
		  		},
				onFailure: function() {
					alert('No connection to central server')
				}
			});
		}
		Tool.change('Pan')
	},

	editPoint : function(labelName, desc, id){
		if(labelName != null && labelName != ''){
			// updates landmark name in the database
			new Ajax.Request('landmark.php', {
		 		method: 'get',
		  		parameters: {
					id: id,
					label: labelName,
					desc: desc
		  		},
		  		onSuccess: function(response) {
					var curLandmark = Tool.Landmark.points.get(id)
					curLandmark.label = labelName
					curLandmark.desc = desc
					curLandmark.descRendered = false
		  		}
			});
		}
	},

	deletePoint: function(id){
		if(confirm('Are you sure you want to delete this point? Press OK to continue or Cancel to stop.')){
		new Ajax.Request('landmark.php', {
		 	method: 'get',
		  	parameters: {
				remove: id,
		  	},
		})
		Tool.Landmark.points.get(id).deleted = true
		Tool.Landmark.points.unset(id)
		}
	},
	// This will put in the description div if it does not exist, or otherwise display it
	mouse: function(e){
		x = Event.pointerX(e)
		y = Event.pointerY(e)
		
		pointOpen = false // this currently means no description div has been added for this point
		Tool.Landmark.openDescriptions.each(function(id){
			if (Tool.Landmark.currentDragging == id){
				pointOpen = true
			}
		})
		if(!pointOpen){
			Tool.Landmark.openDescriptions.push(Tool.Landmark.currentDragging)
			$('popup').update($('popup').innerHTML + '<div style="position: absolute; left: ' + (x - Tool.Pan.popupcss_x) + 'px; top: ' + (y - Tool.Pan.popupcss_y) + 'px" id="t'+Tool.Landmark.currentDragging+'">' + Tool.Landmark.currentDragging + ' test</div>')
		}
		else{
			$('t'+Tool.Landmark.currentDragging).style.display = 'inline'
		}
		$('main').stopObserving('mouseup', Tool.Landmark.mouse)
	},

	MyPoint: Class.create({
		initialize: function(x,y,r,label,desc,id) {
			this.x = x
			this.y = y
			this.r = r
			this.label = label
			this.desc = desc
			this.descView = ['', '','','']
			this.color = '#200'
			this.id = id
			this.dragging = false
			this.expanded = false
			this.deleted = false
			this.descRendered = false
			Glop.observe('glop:postdraw', this.draw.bindAsEventListener(this))
			Glop.observe('mousedown', this.click.bindAsEventListener(this))
		},
		draw: function() {
			if(!this.deleted){
			$C.save()
			$C.line_width(3/Map.zoom)
			$C.translate(this.x, this.y)
			$C.fill_style("#333")
			//$C.opacity(0.6)
			$C.stroke_style('black')
			$C.stroke_circ(0, 0, this.r)
			//$C.fill_style('white')
			var width
			if(this.expanded){
				width = $C.measure_text('Arial', 18, this.label1)
				$C.canvas.fillStyle = 'white'
				$C.rect(5, -259, 250, 253)
				$C.draw_text('Arial', 18, 'black', 10, -236, this.label)
				// begin drawing the description
				
				if(!this.descRendered){
					var i = 1
					var line = 0
					var start = 0
					var indexOfLastSpace = this.desc.length
					this.descView = ['','','','']
					var reachedEnd = false
						while (line < 4 && i < this.desc.length){
							console.log(start+','+i)
							if ($C.measure_text('Arial', 12, this.desc.substring(start, i)) < 240){
								this.descView[line] = this.desc.substring(start, i+1)
								if (this.desc.charAt(i) == ' '){
									indexOfLastSpace = i
								}
								
							}
							else {
								console.log('indexspace: '+indexOfLastSpace)
								console.log(this.desc.substring(start))
								this.descView[line] = this.desc.substring(start, indexOfLastSpace)
								console.log(this.descView[line])
								start = indexOfLastSpace + 1
								line++
							}
							i++
						}
					this.descRendered = true
				}
				$C.draw_text('Arial', 12, 'black', 10, -102, this.descView[0])
				$C.draw_text('Arial', 12, 'black', 10, -82, this.descView[1])
				$C.draw_text('Arial', 12, 'black', 10, -62, this.descView[2])
				$C.draw_text('Arial', 12, 'black', 10, -42, this.descView[3])
				var imag = new Image()
				imag.src = 'pic.jpg'
				//imag.onload = function(){
					$C.canvas.drawImage(imag, 10,-200)
				//	alert('yay')
				//}
			}
			else{
				width = $C.measure_text('Arial', 18, this.label)
				$C.canvas.fillStyle = 'white'
				$C.rect(5, -33, width+10, 28)
				$C.draw_text('Arial', 18, 'black', 10, -10, this.label)
			}
			
			$C.restore()

			if (this.dragging && Mouse.down) {
				this.drag()
				//console.log('dragging1')
			}
			else if (this.mouse_inside()) {
				if (Mouse.down) {
					this.drag()
					//console.log('dragging2')
				}
				else {
					this.hover()
				}
			}
			else if (this.mouse_inside_text()){
				//$('main').style.cursor = 'pointer'
			}
			else if (this.mouse_over_edit()){
			}
			else {
				this.base()
				//$('main').style.cursor = 'default'
			}
			}
		},
		mouse_inside: function() {
			//console.log((Geometry.distance(this.x, this.y, Map.pointer_x(), Map.pointer_y()) < this.r))
			return (Geometry.distance(this.x, this.y, Map.pointer_x(), Map.pointer_y()) < this.r + 5)
		},
		mouse_inside_text: function() {
			var left = this.x + 5
			var right = this.x + 10 + $C.measure_text('Arial', 18, this.label)
			var top = this.y - 33
			var bottom = this.y - 5
			return Map.pointer_x() > left && Map.pointer_x() < right && Map.pointer_y() > top && Map.pointer_y() < bottom // && !this.expanded
		},
		mouse_over_edit: function() {
			var left = this.x + 104
			var right = this.x + 255
			var top = this.y - 255
			var bottom = this.y - 150
			var over = Map.pointer_x() > left && Map.pointer_x() < right && Map.pointer_y() > top && Map.pointer_y() < bottom && this.expanded
			if(over){
				console.log('over')
			}
			return over
		},
		base: function() {
			this.color = '#200'
			this.dragging = false
			document.body.style.cursor = 'default'
		},
		
		click: function() { // seems to be a "mousedown" event rather than "click"
			if (Geometry.distance(this.x, this.y, Map.pointer_x(), Map.pointer_y()) < this.r + 5) {  //&& Tool.active!='Landmark') {
				this.oldx = this.x
				this.oldy = this.y
				this.color = '#f00'
				console.log('clicked my point with label ' + this.label)
				Tool.Landmark.currentDragging = this.id
			}
			else if (this.mouse_inside_text()){
				//console.log('mouse is inside text')
				Tool.Landmark.currentDragging = this.id
				//$('main').observe('mouseup', Tool.Landmark.mouse)
				this.expanded = !this.expanded
				console.log(this.desc)
				
				// $('popup').update($('popup').innerHTML + '<div style="position: absolute; left: ' + this.id*3 + 'px; top: ' + this.id*6 + 'px" id="'+this.id+'">Testing</div>')
				//$('main').stopObserving('mouseup', this.mouse)
				//Modalbox.show('Edit this landmark<br /><form id="lndmrkfrm" onsubmit="Tool.Landmark.editPoint($(\'newName\').value, $(\'newDesc\').value, ' + this.id + ');Modalbox.hide();Events.mouseup();return false"><input type="text" id="newName" value="' + this.label + '"/><br /><br /><textarea id="newDesc" name="newDesc" style="height: 200px; width: 400px;">' + this.desc + '</textarea><br /><input type="submit" value="Edit" /><input type="button" value="Cancel" onclick="Modalbox.hide();Events.mouseup()" /><input type="button" value="Delete" onclick="Tool.Landmark.deletePoint('+this.id+');Modalbox.hide();Events.mouseup()"</form>', {title: 'Edit this landmark'})
			}
			else if (this.mouse_over_edit()) {
				Modalbox.show('Edit this landmark<br /><form id="lndmrkfrm" onsubmit="Tool.Landmark.editPoint($(\'newName\').value, $(\'newDesc\').value, ' + this.id + ');Modalbox.hide();Events.mouseup();return false"><input type="text" id="newName" value="' + this.label + '"/><br /><br /><textarea id="newDesc" name="newDesc" style="height: 200px; width: 400px;">' + this.desc + '</textarea><br /><input type="submit" value="Edit" /><input type="button" value="Cancel" onclick="Modalbox.hide();Events.mouseup()" /><input type="button" value="Delete" onclick="Tool.Landmark.deletePoint('+this.id+');Modalbox.hide();Events.mouseup()"</form>', {title: 'Edit this landmark'})
			}
		},
		hover: function() {
			this.color = '#900'
			this.dragging = false
		},
		drag: function() {
			//if (this.parent_shape.active  /*&& Geometry.distance(this.x, this.y, Map.pointer)*/) {
			//console.log('dragging!!!')
				if (!this.dragging) {
					this.dragging = true
					this.drag_offset_x = Map.pointer_x() - this.x
					this.drag_offset_y = Map.pointer_y() - this.y
				}
				this.color = '#f00'
				this.x=Map.pointer_x()
				this.y=Map.pointer_y()
			//}
		},
		r: function() {
			this.color = '#00f'
		}
	})
}
